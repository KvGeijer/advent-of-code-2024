include!("stdlib");
include!("../aoc.zote");

fn vsub(v1, v2) -> zip(v1, v2) >> map(\(x, y) -> x - y);
fn vadd(v1, v2) -> zip(v1, v2) >> map(\(x, y) -> x + y);

fn nbr_pos(nbr) -> match nbr {
    'A' -> [3, 2],
    '0' -> [3, 1],
    n -> [(9-int(n))/3, (int(n) - 1) % 3],
};

fn steps((r, c)) -> {
    out := [];
    for _ in [0:r] [1, 0] >> push(out);
    for _ in [0:-r] [-1, 0] >> push(out);
    for _ in [0:c] [0, 1] >> push(out);
    for _ in [0:-c] [0, -1] >> push(out);
    out
} 

fn permutations(things) -> {
    if len(things) <= 1 [things]
    else {
        perms := [];

        for (i, first) in enumerate(things) {
            rem := things[:i] ++ things[i+1:];       
            for perm in permutations(rem) push([first] ++ perm, perms);
        }
        perms
    }
}

fn nbr_pos(nbr) -> match nbr {
    'A' -> [3, 2],
    '0' -> [3, 1],
    n -> [(9-int(n))/3, (int(n) - 1) % 3],
};

fn step_to_dirpos(step) -> match step {
    (0, 1) -> [1,2],
    (0, -1) -> [1,0],
    (1, 0) -> [1,1],
    (-1, 0) -> [0,1],
    (0, 0) -> [0,2],
}

memo := dict();
fn bfs(from, to, keypad, disallowed) -> {
    if keypad == 0 return 1;

    key := [from, to, keypad];
    if key >> in(memo) return memo[key];

    // Try to get from from to to, in the least number of steps
    // So try all permutations
    best := nil;
    for step_perm in permutations(vsub(to, from) >> steps) >> set >> keys {
        // Here we have a way to get from 'from' to 'to'
        // However, we must make sure we don't actually end up also in a disallowed state
        pos := from;
        outside := false;
        for step in step_perm {
            pos = pos >> vadd(step);
            if pos == disallowed outside = true;
        }
        if outside continue;

        // This should be a valid path, so how good is it?
        length := 0;
        keypad_pos := [0, 2]; // start at A in the keypad below
        for step in step_perm {
            // To take this one step on this keypad, the next keypad should find the corresponding direction key, and press A
            next_pos := step >> step_to_dirpos;
            length += bfs(keypad_pos, next_pos, keypad - 1, [0, 0]); // Move between two numbers
            keypad_pos = next_pos;
        }
        length += bfs(keypad_pos, [0, 2], keypad - 1, [0, 0]); // And activate the command!
        if best == nil or length < best best = length;
    }
    memo[key] = best
}

fn press_code_opt(code, robots) -> {
    // Here we have the indexes robot 0 must move between
    positions := ("A" ++ code) >> map(nbr_pos);

    // Then we use memoization to find the positions all further robots must move between
    moves := 0;
    for (from, to) in zip(positions, positions[1:]) {
        // What is the best possible way robots can get between these numbers?
        moves += bfs(from, to, robots + 1, [3, 0]);
    }
    moves * int(code[:3])
}

for robots in [2, 25]
    read('input.txt') >> trim >> split("\n") >> map(\>> press_code_opt(robots)) >> sum >> print;
