include!("stdlib");
include!("../aoc.zote");

(a, b, c) := read("input.txt") >> ints >> [:3];
program := read("input.txt") >> ints >> [3:];

fn exec(a) -> a >> bit_xor(6) >> bit_xor(bit_rshift(a, bit_xor(3, a) % 8)) >> mod(8);

fn part1(a) -> {
    out := [];
    while a {
        a >> exec >> push(out);
        a /= 8;
    }
    out
}
a >> part1 >> map(str) >> join(",") >> print;

candidates := [1:1024] >> filter(\>> exec >> eq(program[0]));
for (i, output) in enumerate(program)[1:] {
    next := [];
    // We have an int that is okay for the prev ones, can add up to three new bits and hope it is still valid
    for cand in candidates for j in [0:8] {
        new_cand := cand + bit_lshift(j, i*3 + 7);
        if exec(new_cand/8^i) == output and new_cand/(8^len(program)) == 0
            new_cand >> push(next);
    }
    candidates = next;
}

candidates >> minimum >>  print;
